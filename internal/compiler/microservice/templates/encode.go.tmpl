{{- define "EncodeMethod"}}
func (x *{{.Name}}) Encode(field *protolizer.Field, buffer *bytes.Buffer) error {
    switch field.Tags.Protobuf.FieldNum {
        {{- range $field := .Fields}}
            case {{ $field.FieldNum }}: {
                {{- if eq $field.Optional true }}
                    if x.{{$field.Name}} == nil {
                        return nil
                    }
                {{- end }}
                {{template "EncodeField" $field}}
            }
        {{- end }}        
        default: {
            return fmt.Errorf("invalid field")
        }
    }    
}
{{- end}}

{{- define "EncodeField"}}
    {{- if eq .Kind 1}}
        {{template "EncodeBool" .}}
    {{- else if or (eq .Kind 2) (eq .Kind 3) (eq .Kind 4) (eq .Kind 5) (eq .Kind 6)}}
        {{template "EncodeSignedNumber" .}}
    {{- else if or (eq .Kind 7) (eq .Kind 8) (eq .Kind 9) (eq .Kind 10) (eq .Kind 11)}}
        {{template "EncodeUnsignedNumber" .}}
    {{- else if eq .Kind 13}}
        {{template "EncodeFloat32" .}}
    {{- else if eq .Kind 14}}
        {{template "EncodeFloat64" .}}
    {{- else if eq .Kind 17}}
        {{template "EncodeRepeated" .}}
    {{- else if eq .Kind 21}}
        {{template "EncodeMap" .}}
    {{- else if eq .Kind 24}}
        {{template "EncodeString" .}}
    {{- else if eq .Kind 25}}
        {{template "EncodeMessage" .}}
    {{- else}}
        return fmt.Errorf("unsupported field type {{.Kind}}")
    {{- end}}
{{- end}}

{{- define "EncodeBool"}}
protolizer.BoolInlineEncode({{if eq .Optional true}}*{{end}}x.{{.Name}}, buffer)
return nil
{{- end}}

{{- define "EncodeSignedNumber"}}
protolizer.SignedNumberInlineEncoder(int64({{if eq .Optional true}}*{{end}}x.{{.Name}}), field, buffer)
return nil
{{- end}}

{{- define "EncodeUnsignedNumber"}}
protolizer.UnsignedNumberInlineEncoder(uint64({{if eq .Optional true}}*{{end}}x.{{.Name}}), field, buffer)
return nil
{{- end}}

{{- define "EncodeFloat32"}}
protolizer.Float32InlineEncode(int64({{if eq .Optional true}}*{{end}}x.{{.Name}}), buffer)
return nil
{{- end}}

{{- define "EncodeFloat64"}}
protolizer.Float64InlineEncode(float64({{if eq .Optional true}}*{{end}}x.{{.Name}}), buffer)
return nil
{{- end}}

{{- define "EncodeString"}}
protolizer.StringInlineEncode({{if eq .Optional true}}*{{end}}x.{{.Name}}, buffer)
return nil
{{- end}}

{{- define "EncodeMessage"}}
data, err := protolizer.FastInlineMarshal(x.{{.Name}})
defer protolizer.Dealloc(data)
if err != nil {
    return err
}  

bytes := protolizer.BufferEncode(data)
defer protolizer.Dealloc(bytes)
bytes.WriteTo(buffer)
return nil
{{- end}}