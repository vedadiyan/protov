{{- define "Main"}}
// Code generated by protov. DO NOT EDIT.
// versions:
// 	protov        v0.0.1
// 	protolizer    v0.0.1
// source: {{.Source}}
package {{.PackageName}}

import (
    "bytes"
    "fmt"
    "io"

    "github.com/vedadiyan/protolizer"
)

{{- range $service := .Services }}
  type {{$service.Name}}ServiceOptions struct {
      {{- template "parseMap" $service.Options }}
  }
  {{- range $rpc := $service.Rpcs}}
      type {{$rpc.Name}}RpcOptions struct {
          {{- template "parseMap" $rpc.Options }}
      }
  {{- end }}
  type {{$service.Name}}Server interface {
    Start({{$service.Name}}Options) error
    Stop() error
    Handle(string, func(context.Context, *protolizer.Request[protolizer.Reflected])(*protolizer.Response[protolizer.Reflected], error))
  }
  type {{$service.Name}}Service interface {
      {{- range $rpc := $service.Rpcs}}
      {{$rpc.Name}}({{$rpc.Name}}RpcOptions)func(context.Context, *protolizer.Request[{{$rpc.Input}}])(*protolizer.Response[{{$rpc.Output}}], error)
      {{- end }}
  }        

{{- end }}
{{- end }}


{{- define "parseMap" -}}
  {{- range $key, $value := . }}
    {{- if eq (printf "%T" $value) "map[string]interface {}" }}
      {{$key}} struct {
        {{- template "parseMap" $value }}
      }
    {{- else }}
      {{$key}} {{(printf "%T" $value)}}
    {{- end }}
  {{- end }}
{{- end }}
