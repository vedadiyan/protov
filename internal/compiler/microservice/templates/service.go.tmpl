{{- define "Main"}}
// Code generated by protov. DO NOT EDIT.
// versions:
// 	protov        v0.0.1
// 	protolizer    v0.0.1
// source: {{.Source}}
package {{.PackageName}}

import (
    "bytes"
    "fmt"
    "io"

    "github.com/vedadiyan/protolizer"
)

{{- range $service := .Services }}
  type {{$service.Name}}ServiceOptions struct {
      {{- template "parseMap" $service.Options }}
  }
  type {{$service.Name}}RpcOptions struct {
    Name string
    Options struct {
      {{- template "parseMap" $service.RpcOptions }}
    }
  }
  type {{$service.Name}}Server interface {
    Start({{$service.Name}}Options) error
    Stop() error
    Handle({{$service.Name}}RpcOptions, func(context.Context, protolizer.Reflected)(protolizer.Reflected, error))
  }
  type {{$service.Name}}Service interface {
      {{- range $rpc := $service.Rpcs}}
      {{$rpc.Name}}(context.Context, *{{$rpc.Input}}) (*{{$rpc.Output}}, error)
      {{- end }}
  }        

{{- end }}
{{- end }}


{{- define "parseMap" -}}
  {{- range $key, $value := . }}
    {{- if eq (printf "%T" $value) "map[string]interface {}" }}
      {{$key}} struct {
        {{- template "parseMap" $value }}
      }
    {{- else }}
      {{$key}} {{(printf "%T" $value)}}
    {{- end }}
  {{- end }}
{{- end }}
