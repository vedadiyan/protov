{{- define "Message"}}
type {{.Name}} struct {
    {{- range $field := .Fields }}
    {{ $field.Name }} {{ $field.Type }} `{{- $field.MarshalledTag }}`
    {{- end }} 
}

func (x *{{.Name}}) New() protolizer.Reflected {
    return new({{.Name}})
}

func (x *{{.Name}}) Type() protolizer.Type {
    return *protolizer.CaptureTypeByName("{{.TypeName}}")
}

func (x *{{.Name}}) Encode(field *protolizer.Field, buffer *bytes.Buffer) error {
    switch field.Tags.Protobuf.FieldNum {
        {{- range $field := .Fields}}
            case {{ $field.FieldNum }}: {
                {{- if eq $field.Optional true }}
                    if x.{{$field.Name}} == nil {
                        return nil
                    }
                {{- end }}
                {{- if eq $field.Kind 1}}
                    protolizer.BoolInlineEncode({{if eq $field.Optional true}}*{{end}}x.{{$field.Name}}, buffer)
                    return nil
                {{- else if or (eq $field.Kind 2) (eq $field.Kind 3) (eq $field.Kind 4) (eq $field.Kind 5) (eq $field.Kind 6) }} 
                    protolizer.SignedNumberInlineEncoder(int64({{if eq $field.Optional true}}*{{end}}x.{{$field.Name}}), field, buffer)
                    return nil
                {{- else if or (eq $field.Kind 7) (eq $field.Kind 8) (eq $field.Kind 9) (eq $field.Kind 10) (eq $field.Kind 11) }} 
                    protolizer.UnsignedNumberInlineEncoder(uint64({{if eq $field.Optional true}}*{{end}}x.{{$field.Name}}), field, buffer)
                    return nil
                {{- else if eq $field.Kind 13}} 
                    protolizer.Float32InlineEncode(int64({{if eq $field.Optional true}}*{{end}}x.{{$field.Name}}), buffer)
                    return nil 
                {{- else if eq $field.Kind 14}} 
                    protolizer.Float64InlineEncode(float64({{if eq $field.Optional true}}*{{end}}x.{{$field.Name}}), buffer)
                    return nil 
                {{- else if eq $field.Kind 17}} 
                    {{- if eq $field.Index 8}}
                        data, err := protolizer.EncodeBytes(int64({{if eq $field.Optional true}}*{{end}}x.{{$field.Name}}), field)
                        defer protolizer.Dealloc(data)
                        if err != nil {
                            return err
                        }
                        data.WriteTo(buffer)
                        return nil 
                    {{- else if eq $field.Index 1}}
                        innerBuffer := protolizer.Alloc(0)
                        defer protolizer.Dealloc(innerBuffer)
                        for _, value := range x.{{$field.Name}} {
                            protolizer.BoolInlineEncode(value, innerBuffer)
                        }
                        bytes := protolizer.BufferEncode(innerBuffer)
                        bytes.WriteTo(buffer)
                        protolizer.Dealloc(bytes)
                        return nil
                    {{- else if or (eq $field.Index 2) (eq $field.Index 3) (eq $field.Index 4) (eq $field.Index 5) (eq $field.Index 6) }}
                        innerBuffer := protolizer.Alloc(0)
                        defer protolizer.Dealloc(innerBuffer)
                        for _, value := range x.{{$field.Name}} {
                            protolizer.SignedNumberInlineEncoder(int64(value), field, innerBuffer)
                        }
                        bytes := protolizer.BufferEncode(innerBuffer)
                        bytes.WriteTo(buffer)
                        protolizer.Dealloc(bytes)
                        return nil
                    {{- else if or (eq $field.Index 7) (eq $field.Index 9) (eq $field.Index 10) (eq $field.Index 11) }}
                        innerBuffer := protolizer.Alloc(0)
                        defer protolizer.Dealloc(innerBuffer)
                        for _, value := range x.{{$field.Name}} {
                            protolizer.UnsignedNumberInlineEncoder(uint64(value), field, innerBuffer)
                        }
                        bytes := protolizer.BufferEncode(innerBuffer)
                        bytes.WriteTo(buffer)
                        protolizer.Dealloc(bytes)
                        return nil
                    {{- else if eq $field.Index 13 }}
                        innerBuffer := protolizer.Alloc(0)
                        defer protolizer.Dealloc(innerBuffer)
                        for _, value := range x.{{$field.Name}} {
                            protolizer.Float32InlineEncode(value, innerBuffer)
                        }
                        bytes := protolizer.BufferEncode(innerBuffer)
                        bytes.WriteTo(buffer)
                        protolizer.Dealloc(bytes)
                        return nil
                    {{- else if eq $field.Index 14 }}
                        innerBuffer := protolizer.Alloc(0)
                        defer protolizer.Dealloc(innerBuffer)
                        for _, value := range x.{{$field.Name}} {
                            protolizer.Float64InlineEncode(value, innerBuffer)
                        }
                        bytes := protolizer.BufferEncode(innerBuffer)
                        bytes.WriteTo(buffer)
                        protolizer.Dealloc(bytes)
                        return nil
                    {{- else if eq $field.Index 24 }}
                        tag, err := protolizer.TagEncode(int32(field.Tags.Protobuf.FieldNum), protolizer.WireTypeLen)
                        defer protolizer.Dealloc(tag)
                        if err != nil {
                            return err
                        }
                        for i, x := range x.{{$field.Name}} {
                            if i != 0 {
                                buffer.Write(tag.Bytes())
                            }
                            protolizer.StringInlineEncode(x, buffer)
                        }
                        return nil
                    {{- else if eq $field.Index 25 }}
                        tag, err := protolizer.TagEncode(int32(field.Tags.Protobuf.FieldNum), protolizer.WireTypeLen)
                        defer protolizer.Dealloc(tag)
                        if err != nil {
                            return err
                        }
                        for i, value := range x.{{$field.Name}} {
                            if i != 0 {
                                buffer.Write(tag.Bytes())
                            }
                            data, err := protolizer.FastInlineMarshal(x.{{$field.Name}})
                            if err != nil {
                                return err
                            }
                            bytes := protolizer.BufferEncode(data)
                            bytes.WriteTo(buffer)
                            protolizer.Dealloc(data)
                            protolizer.Dealloc(bytes)
                        }
                        return nil  
                    {{- else }}
                        return fmt.Errorf("unsupported index type %T", x.{{$field.Name}})
                    {{- end }}
                {{- else if eq $field.Kind 21}}
                    tag, err := protolizer.TagEncode(int32(field.Tags.Protobuf.FieldNum), protolizer.WireTypeLen)
                    defer protolizer.Dealloc(tag)
                    if err != nil {
                        return err
                    }
                    i := 0
                    for key, value := range x.{{$field.Name}} {
                        if i != 0 {
                            buffer.Write(tag.Bytes())
                        }
                        i++
                        innerBuffer := protolizer.Alloc(0)
                        innerBuffer.Write(field.KeyTag)
                        {{- if eq $field.Key 1}}
                            protolizer.BoolInlineEncode(key, innerBuffer)
                        {{- else if or (eq $field.Key 2) (eq $field.Key 3) (eq $field.Key 4) (eq $field.Key 5) (eq $field.Key 6) }}
                            protolizer.SignedNumberInlineEncoder(int64(key), field, innerBuffer)
                        {{- else if or (eq $field.Key 7) (eq $field.Key 8) (eq $field.Key 9) (eq $field.Key 10) (eq $field.Key 11) }}
                            protolizer.UnsignedNumberInlineEncoder(int64(key), field, innerBuffer)
                        {{- else if eq $field.Key 13}}
                            protolizer.Float32InlineEncode(float32(key), innerBuffer)  
                        {{- else if eq $field.Key 14}}
                            protolizer.Float64InlineEncode(float64(key), innerBuffer)    
                        {{- else if eq $field.Key 24}}
                            protolizer.StringInlineEncode(key, innerBuffer)         
                        {{- else }}
                            return fmt.Errorf("unsupported key type %T", key)
                        {{- end }}
                        innerBuffer.Write(field.ValueTag)
                        {{- if eq $field.Index 1}}
                            protolizer.BoolInlineEncode(value, innerBuffer)
                        {{- else if or (eq $field.Index 2) (eq $field.Index 3) (eq $field.Index 4) (eq $field.Index 5) (eq $field.Index 6) }}
                            protolizer.SignedNumberInlineEncoder(int64(value), field, innerBuffer)
                        {{- else if or (eq $field.Index 7) (eq $field.Index 8) (eq $field.Index 9) (eq $field.Index 10) (eq $field.Index 11) }}
                            protolizer.UnsignedNumberInlineEncoder(int64(value), field, innerBuffer)
                        {{- else if eq $field.Index 13}}
                            protolizer.Float32InlineEncode(float32(value), innerBuffer)
                        {{- else if eq $field.Index 14}}
                            protolizer.Float64InlineEncode(float64(value), innerBuffer)   
                        {{- else if eq $field.Index 24}}
                            protolizer.StringInlineEncode(value, innerBuffer)
                        {{- else if eq $field.Index 25}}
                            {
                                v, err := protolizer.FastInlineMarshal(value)
                                if err != nil {
                                    return err
                                }
                                bytes := protolizer.BufferEncode(v)
                                protolizer.Dealloc(v)
                                bytes.WriteTo(innerBuffer)
                                protolizer.Dealloc(bytes)  
                            }
                        {{- else }}
                            return fmt.Errorf("unsupported value type %T", value)
                        {{- end }}

                        bytes := protolizer.BufferEncode(innerBuffer)
                        bytes.WriteTo(buffer)
                        protolizer.Dealloc(innerBuffer)
                        protolizer.Dealloc(bytes)
                    }
                    return nil 
                {{- else if eq $field.Kind 24}}
                    protolizer.StringInlineEncode({{if eq $field.Optional true}}*{{end}}x.{{$field.Name}}, buffer)
                    return nil
                {{- else if eq $field.Kind 25}}
                    data, err := protolizer.FastInlineMarshal(x.{{$field.Name}})
                    defer protolizer.Dealloc(data)
                    if err != nil {
                        return err
                    }  

                    bytes := protolizer.BufferEncode(data)
                    defer protolizer.Dealloc(bytes)
                    bytes.WriteTo(buffer)
                    return nil
                {{- else }}
                    return fmt.Errorf("unsupported field type {{$field.Kind}}")
                {{- end }}

            }
        {{- end }}        
        default: {
            return fmt.Errorf("invalid field")
        }
    }    
} 

func (x *{{.Name}}) Decode(field *protolizer.Field, buffer *bytes.Buffer) error {
    switch field.Tags.Protobuf.FieldNum {
        {{- range $field := .Fields}}
            case {{ $field.FieldNum }}: {
                {{- if eq $field.Kind 1}}
                    value, err := protolizer.BooleanDecoder(field, buffer)
                     if err != nil {
                        return err
                    } 
                    x.{{$field.Name}} = {{- if eq $field.Optional true}}&{{end}}value
                    return nil
                {{- else if or (eq $field.Kind 2) (eq $field.Kind 3) (eq $field.Kind 4) (eq $field.Kind 5) (eq $field.Kind 6) }} 
                    value, err := protolizer.SignedNumberDecoder(field, buffer)
                     if err != nil {
                        return err
                    } 
                    val := {{$field.BaseType}}(value)
                    x.{{$field.Name}} = {{- if eq $field.Optional true}}&{{end}}val
                     return nil
                {{- else if or (eq $field.Kind 7) (eq $field.Kind 8) (eq $field.Kind 9) (eq $field.Kind 10) (eq $field.Kind 11) }} 
                    value, err := protolizer.UnsignedNumberDecoder(field, buffer)
                     if err != nil {
                        return err
                    } 
                    val := {{$field.BaseType}}(value)
                    x.{{$field.Name}} = {{- if eq $field.Optional true}}&{{end}}val
                     return nil
                {{- else if eq $field.Kind 13}} 
                    value, err := protolizer.FloatDecoder(field, buffer)
                     if err != nil {
                        return err
                    } 
                    val := {{$field.BaseType}}(value)
                    x.{{$field.Name}} = {{- if eq $field.Optional true}}&{{end}}val
                    return nil
                {{- else if eq $field.Kind 14}} 
                    value, err := protolizer.DoubleDecoder(field, buffer)
                     if err != nil {
                        return err
                    } 
                   val := {{$field.BaseType}}(value)
                    x.{{$field.Name}} = {{- if eq $field.Optional true}}&{{end}}val
                    return nil
                {{- else if eq $field.Kind 17}} 
                    {{- if eq $field.Index 8}}
                        bytes, err := protolizer.BytesDecode(buffer)
                        if err != nil {
                            return err
                        }
                        x.{{$field.Name}} = bytes
                        return nil
                    {{- else if eq $field.Index 1}}
                        bytes, err := protolizer.BytesDecode(buffer)
                        if err != nil {
                            return err
                        }
                        innerBuffer := protolizer.Alloc(0)
                        innerBuffer.Write(bytes)
                        defer protolizer.Dealloc(innerBuffer)
                        for innerBuffer.Len() != 0 {
                            value, err := protolizer.BooleanDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                            x.{{$field.Name}} = append(x.{{$field.Name}}, {{$field.BaseType}}(value))
                        }
                        return nil
                    {{- else if or (eq $field.Index 2) (eq $field.Index 3) (eq $field.Index 4) (eq $field.Index 5) (eq $field.Index 6) }}
                        bytes, err := protolizer.BytesDecode(buffer)
                        if err != nil {
                            return err
                        }
                        innerBuffer := protolizer.Alloc(0)
                        innerBuffer.Write(bytes)
                        defer protolizer.Dealloc(innerBuffer)
                        for innerBuffer.Len() != 0 {
                            value, err := protolizer.SignedNumberDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                            x.{{$field.Name}} = append(x.{{$field.Name}}, {{$field.BaseType}}(value))
                        }
                        return nil
                    {{- else if or (eq $field.Index 7) (eq $field.Index 9) (eq $field.Index 10) (eq $field.Index 11) }}
                        bytes, err := protolizer.BytesDecode(buffer)
                        if err != nil {
                            return err
                        }
                        innerBuffer := protolizer.Alloc(0)
                        innerBuffer.Write(bytes)
                        defer protolizer.Dealloc(innerBuffer)
                        for innerBuffer.Len() != 0 {
                            value, err := protolizer.UnsignedNumberDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                            x.{{$field.Name}} = append(x.{{$field.Name}}, {{$field.BaseType}}(value))
                        }
                        return nil
                    {{- else if eq $field.Index 13 }}
                        bytes, err := protolizer.BytesDecode(buffer)
                        if err != nil {
                            return err
                        }
                        innerBuffer := protolizer.Alloc(0)
                        innerBuffer.Write(bytes)
                        defer protolizer.Dealloc(innerBuffer)
                        for innerBuffer.Len() != 0 {
                            value, err := protolizer.FloatDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                            x.{{$field.Name}} = append(x.{{$field.Name}}, {{$field.BaseType}}(value))
                        }
                        return nil
                    {{- else if eq $field.Index 14 }}
                        bytes, err := protolizer.BytesDecode(buffer)
                        if err != nil {
                            return err
                        }
                        innerBuffer := protolizer.Alloc(0)
                        innerBuffer.Write(bytes)
                        defer protolizer.Dealloc(innerBuffer)
                        for innerBuffer.Len() != 0 {
                            value, err := protolizer.DoubleDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                            x.{{$field.Name}} = append(x.{{$field.Name}}, {{$field.BaseType}}(value))
                        }
                        return nil
                    {{- else if eq $field.Index 24 }}
                        i := 0
                        for {
                            if i != 0 {
                                i, _, read, err := protolizer.TagPeek(buffer)
                                if err != nil {
                                    if err == io.EOF {
                                        return nil
                                    }
                                    return err
                                }
                                if i != int32(field.Tags.Protobuf.FieldNum) {
                                    break
                                }
                                read()
                            }
                            i++
                            value, err := protolizer.StringDecode(buffer)
                            if err != nil {
                                return nil
                            }
                            x.{{$field.Name}} = append(x.{{$field.Name}}, {{$field.BaseType}}(value))
                        }
                        return nil
                    {{- else if eq $field.Index 25 }}
                        i := 0
                        for {
                            if i != 0 {
                                i, _, read, err := protolizer.TagPeek(buffer)
                                if err != nil {
                                    if err == io.EOF {
                                        return nil
                                    }
                                    return err
                                }
                                if i != int32(field.Tags.Protobuf.FieldNum) {
                                    break
                                }
                                read()
                            }
                            i++
                            data, err := protolizer.BytesDecode(buffer)
                            if err != nil {
                                return err
                            }
                            bytes := protolizer.Alloc(0)
                            value := new({{$field.BaseType}})
                            bytes.Write(data)
                            err = protolizer.FastUnmarshal(data, value)
                            protolizer.Dealloc(bytes)
                            if err != nil {
                                return nil
                            }
                            x.{{$field.Name}} = append(x.{{$field.Name}}, {{$field.Type}}(value))
                        }
                        return nil
                    {{- else }}
                        return fmt.Errorf("unsupported index type %T", x.{{$field.Name}})
                    {{- end }}
                {{- else if eq $field.Kind 21}}
                   x.Metadata = make(map[string]string)
                    i := 0
                    for {
                        if i != 0 {
                            i, _, read, err := protolizer.TagPeek(buffer)
                            if err != nil {
                                if err == io.EOF {
                                    return nil
                                }
                                return err
                            }
                            if i != int32(field.Tags.Protobuf.FieldNum) {
                                break
                            }
                            read()
                        }
                        i++
                        bytes, err := protolizer.BytesDecode(buffer)
                        if err != nil {
                            return nil
                        }
                        innerBuffer := protolizer.Alloc(0)
                        innerBuffer.Write(bytes)
                        _, _, err = protolizer.TagDecode(innerBuffer)
                        if err != nil {
                            protolizer.Dealloc(innerBuffer)
                            return err
                        }
     
                       {{- if eq $field.Key 1}}
                            key, err := protolizer.BooleanDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                        {{- else if or (eq $field.Key 2) (eq $field.Key 3) (eq $field.Key 4) (eq $field.Key 5) (eq $field.Key 6) }}
                            key, err := protolizer.SignedNumberDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                        {{- else if or (eq $field.Key 7) (eq $field.Key 8) (eq $field.Key 9) (eq $field.Key 10) (eq $field.Key 11) }}
                            key, err := protolizer.UnsignedNumberDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                        {{- else if eq $field.Key 13}}
                            key, err := protolizer.FloatDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }    
                        {{- else if eq $field.Key 14}}
                            key, err := protolizer.DoubleDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }     
                        {{- else if eq $field.Key 24}}
                            key, err := protolizer.StringDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }            
                        {{- else }}
                            return fmt.Errorf("unsupported key type %T", key})
                        {{- end }}

                        
                        _, _, err = protolizer.TagDecode(innerBuffer)
                        if err != nil {
                            protolizer.Dealloc(innerBuffer)
                            return err
                        }

                        {{- if eq $field.Index 1}}
                            value, err := protolizer.BooleanDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                        {{- else if or (eq $field.Index 2) (eq $field.Index 3) (eq $field.Index 4) (eq $field.Index 5) (eq $field.Index 6) }}
                            value, err := protolizer.SignedNumberDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                        {{- else if or (eq $field.Index 7) (eq $field.Index 8) (eq $field.Index 9) (eq $field.Index 10) (eq $field.Index 11) }}
                            value, err := protolizer.UnsignedNumberDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }
                        {{- else if eq $field.Index 13}}
                            value, err := protolizer.FloatDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }    
                        {{- else if eq $field.Index 14}}
                            value, err := protolizer.DoubleDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }     
                        {{- else if eq $field.Index 24}}
                            value, err := protolizer.StringDecoder(field, innerBuffer)
                            if err != nil {
                                return err
                            }  
                        {{- else if eq $field.Index 25}}
                            data, err := protolizer.BytesDecode(innerBuffer)
                            if err != nil {
                                return err
                            }
                            value := new({{$field.BaseType}})
                            err = protolizer.FastUnmarshal(data, value)
                            if err != nil {
                                return err
                            }  
                        {{- else }}
                            return fmt.Errorf("unsupported value type %T", value})
                        {{- end }}
                        x.{{$field.Name}}[{{$field.KeyBaseType}}(key)] = {{$field.IndexBaseType}}(value)
                        protolizer.Dealloc(innerBuffer)
                    }
                    return nil
                {{- else if eq $field.Kind 24}}
                    value, err := protolizer.StringDecoder(field, buffer)
                     if err != nil {
                        return err
                    } 
                    x.{{$field.Name}} = {{- if eq $field.Optional true}}&{{end}}value
                    return nil
                {{- else if eq $field.Kind 25}}
                    value := new({{$field.BaseType}})
                    bytes, err := protolizer.BytesDecode(buffer)
                    if err != nil {
                        return err
                    }
                    err = protolizer.FastUnmarshal(bytes, value)
                     if err != nil {
                        return err
                    }     
                    x.{{$field.Name}} = {{- if eq $field.Optional true}}&{{end}}value    
                    return nil
                {{- else }}
                    return fmt.Errorf("unsupported field type {{$field.Kind}}")
                {{- end }}
            }
        {{- end }}   
        default: {
                return fmt.Errorf("invalid field")
        }     
    }    
} 

func (x *{{.Name}}) IsZero(field *protolizer.Field) bool {
    switch field.Tags.Protobuf.FieldNum {
        {{- range $field := .Fields}}
            case {{ $field.FieldNum }}: {
                {{- if eq $field.Kind 1}}
                    return {{if eq $field.Optional true}}*{{end}}x.{{$field.Name}} == false
                {{- else if or (eq $field.Kind 2) (eq $field.Kind 3) (eq $field.Kind 4) (eq $field.Kind 5) (eq $field.Kind 6) }} 
                    return {{if eq $field.Optional true}}x.{{$field.Name}} == nil {{else}} x.{{$field.Name}} == 0{{end}}
                {{- else if or (eq $field.Kind 7) (eq $field.Kind 8) (eq $field.Kind 9) (eq $field.Kind 10) (eq $field.Kind 11) }} 
                    return {{if eq $field.Optional true}}x.{{$field.Name}} == nil {{else}} x.{{$field.Name}} == 0{{end}}
                {{- else if eq $field.Kind 13}} 
                    return {{if eq $field.Optional true}}x.{{$field.Name}} == nil {{else}} x.{{$field.Name}} == 0{{end}}
                {{- else if eq $field.Kind 14}} 
                    return {{if eq $field.Optional true}}x.{{$field.Name}} == nil {{else}} x.{{$field.Name}} == 0{{end}}
                {{- else if eq $field.Kind 17}} 
                    return x.{{$field.Name}} == nil
                {{- else if eq $field.Kind 21}}
                    return x.{{$field.Name}} == nil
                {{- else if eq $field.Kind 24}}
                    return {{if eq $field.Optional true}}x.{{$field.Name}} == nil {{else}} len(x.{{$field.Name}}) == 0{{end}}
                {{- else if eq $field.Kind 25}}
                    return x.{{$field.Name}} == nil
                {{- else }}
                    return true
                {{- end }}
            }
        {{- end }}   
        default: {
           return true
        }     
    }    
} 

func init() {
    protolizer.RegisterTypeAs[{{.Name}}]("{{.TypeName}}")
}

{{- end}}