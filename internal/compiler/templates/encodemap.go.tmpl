{{- define "EncodeMap"}}
tag, err := protolizer.TagEncode(int32(field.Tags.Protobuf.FieldNum), protolizer.WireTypeLen)
defer protolizer.Dealloc(tag)
if err != nil {
    return err
}
i := 0
for key, value := range x.{{.Name}} {
    if i != 0 {
        buffer.Write(tag.Bytes())
    }
    i++
    innerBuffer := protolizer.Alloc(0)
    innerBuffer.Write(field.KeyTag)
    {{template "EncodeMapKey" .}}
    innerBuffer.Write(field.ValueTag)
    {{template "EncodeMapValue" .}}

    bytes := protolizer.BufferEncode(innerBuffer)
    bytes.WriteTo(buffer)
    protolizer.Dealloc(innerBuffer)
    protolizer.Dealloc(bytes)
}
return nil
{{- end}}

{{- define "EncodeMapKey"}}
    {{- if eq .Key 1}}
        protolizer.BoolInlineEncode(key, innerBuffer)
    {{- else if or (eq .Key 2) (eq .Key 3) (eq .Key 4) (eq .Key 5) (eq .Key 6)}}
        protolizer.SignedNumberInlineEncoder(int64(key), field, innerBuffer)
    {{- else if or (eq .Key 7) (eq .Key 8) (eq .Key 9) (eq .Key 10) (eq .Key 11)}}
        protolizer.UnsignedNumberInlineEncoder(int64(key), field, innerBuffer)
    {{- else if eq .Key 13}}
        protolizer.Float32InlineEncode(float32(key), innerBuffer)  
    {{- else if eq .Key 14}}
        protolizer.Float64InlineEncode(float64(key), innerBuffer)    
    {{- else if eq .Key 24}}
        protolizer.StringInlineEncode(key, innerBuffer)         
    {{- else}}
        return fmt.Errorf("unsupported key type %T", key)
    {{- end}}
{{- end}}

{{- define "EncodeMapValue"}}
    {{- if eq .Index 1}}
        protolizer.BoolInlineEncode(value, innerBuffer)
    {{- else if or (eq .Index 2) (eq .Index 3) (eq .Index 4) (eq .Index 5) (eq .Index 6)}}
        protolizer.SignedNumberInlineEncoder(int64(value), field, innerBuffer)
    {{- else if or (eq .Index 7) (eq .Index 8) (eq .Index 9) (eq .Index 10) (eq .Index 11)}}
        protolizer.UnsignedNumberInlineEncoder(int64(value), field, innerBuffer)
    {{- else if eq .Index 13}}
        protolizer.Float32InlineEncode(float32(value), innerBuffer)
    {{- else if eq .Index 14}}
        protolizer.Float64InlineEncode(float64(value), innerBuffer)   
    {{- else if eq .Index 24}}
        protolizer.StringInlineEncode(value, innerBuffer)
    {{- else if eq .Index 25}}
        {
            v, err := protolizer.FastInlineMarshal(value)
            if err != nil {
                return err
            }
            bytes := protolizer.BufferEncode(v)
            protolizer.Dealloc(v)
            bytes.WriteTo(innerBuffer)
            protolizer.Dealloc(bytes)  
        }
    {{- else}}
        return fmt.Errorf("unsupported value type %T", value)
    {{- end}}
{{- end}}